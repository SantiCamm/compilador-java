package lyc.compiler;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import lyc.compiler.table.*;
import lyc.compiler.model.*;
import java.util.HashMap;
import lyc.compiler.terceto.*;
import lyc.compiler.utils.*;
import java.util.Stack;
import java.util.Queue;
import java.util.LinkedList;

class Parser;

action code {:
    HashMap<String, SymbolEntry> symbolTable = SymbolTableManager.symbolTable;
    List<String> idList = new ArrayList<>();
    DataType dataType;
    Stack auxExprStack = new Stack<Integer>();
    Stack auxTermStack = new Stack<Integer>();
    Stack auxFactStack = new Stack<Integer>();
    Stack auxCondStack = new Stack<Integer>();
    Stack auxCondExprStack = new Stack<Integer>();
    Stack auxFalsyAllEqualStack = new Stack<Integer>();
    LinkedList allEqualQueue = new LinkedList<String>();
    TercetoManager tercetoManager;

    // Expressions
    int exprIdx;
    int termIdx;
    int factIdx;

    // Conditions
    int condExpr;
    int currLogOp = -1; // 0 --> OR | 1 --> AND
    int complexCond = -1;
    String currentComparator;
    String invCurrentComparator;

    int condIdx;
    int sentIdx;

    // Repeat_inline
    int auxRepInl = 0;

    // All_equal
    int listFound = -1;
:}

// Terminals
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal REST;
terminal MAYOR;
terminal LOWER;
terminal MAYOR_I;
terminal LOWER_I;
terminal EQUAL;
terminal NOT_EQUAL;
terminal AND_COND;
terminal OR_COND;
terminal NOT_COND;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal OPEN_CURLY_BRACKET;
terminal CLOSE_CURLY_BRACKET;
terminal OPEN_SQUARE_BRACKET;
terminal CLOSE_SQUARE_BRACKET;
terminal COMMA;
terminal SEMI_COLON;
terminal DOT;
terminal DOUBLE_DOT;
terminal INTEGER_CONSTANT;
terminal FLOAT_CONSTANT;
terminal STRING_CONSTANT;
terminal INT;
terminal FLOAT;
terminal STRING;
terminal IF;
terminal ELSE;
terminal WHILE;
terminal WRITE;
terminal READ;
terminal String IDENTIFIER;
terminal INIT;
terminal ALL_EQUAL;
terminal REPEAT_INLINE;


// Non Terminals
non terminal program;
non terminal block;
non terminal sentence;
non terminal var_declaration;
non terminal var_sencente_dec;
non terminal data_type;
non terminal id_list;
non terminal decition;
non terminal decitionAux;
non terminal condition;
non terminal comparison;
non terminal comparator;
non terminal iterator;
non terminal assignment;
non terminal s_write;
non terminal s_read;
non terminal write_param;
non terminal read_param;
non terminal expression;
non terminal term;
non terminal factor;
non terminal all_equal;
non terminal repeat_inline;
non terminal comparable_list;
non terminal comparable;
non terminal obj_list;
non terminal trueBody;
non terminal falseBody;

// Start Symbol Definition
start with program;

program ::= block |{: System.out.println("Compilation Ok"); :};
block ::= sentence;
block ::= block sentence;
sentence ::=
                INIT {: System.out.println("Variable declaration starts"); :} OPEN_CURLY_BRACKET var_declaration CLOSE_CURLY_BRACKET {: System.out.println("Variable declaration ends"); :}
                  | decition
                  | iterator
                  | assignment
                  | s_write
                  | s_read
                  | all_equal
                  | repeat_inline;

var_declaration ::= var_sencente_dec var_declaration ;
var_declaration ::= var_sencente_dec;
var_sencente_dec ::= id_list DOUBLE_DOT data_type {:
                    for (String id : idList) {
                        SymbolTableManager.setDataTypeInTable(id, dataType);
                    }
                    idList.removeAll(idList);

                :};
data_type ::=
              INT:type {:
                System.out.println("Int data type");
                dataType = DataType.INTEGER_TYPE;


            :}
            | FLOAT:type {:
                System.out.println("Float data type");
                dataType = DataType.FLOAT_TYPE;

            :}
            | STRING:type {:
                System.out.println("String data type");
                dataType = DataType.STRING_TYPE;

            :};

id_list ::= id_list COMMA IDENTIFIER:id {:
    System.out.println("ID declared: " + id);
    idList.add(id);

:} ;
id_list ::= IDENTIFIER:id {:
    System.out.println("ID declared: " + id);
    idList.add(id);

 :};

decition ::= decitionAux trueBody
            {:
                System.out.println("If statement");

                Terceto terAux;
                if (currLogOp == 1)
                {
                    terAux = (Terceto) auxCondStack.pop();
                    terAux.updateTerceto(2, String.valueOf(TercetoManager.getLastTerceto()+1));

                    terAux = (Terceto) auxCondStack.pop();
                    terAux.updateTerceto(2, String.valueOf(TercetoManager.getLastTerceto()+1));

                } else {
                    terAux = (Terceto) auxCondStack.pop();
                    terAux.updateTerceto(2, String.valueOf(TercetoManager.getLastTerceto()+1));
                }

                currLogOp = -1;
                complexCond = -1;
            :};


decition ::= decitionAux trueBody
            {:
                // Fin bloque V
                Terceto terAux;

                if (currLogOp == 1)
                {
                    terAux = (Terceto) auxCondStack.pop();
                    terAux.updateTerceto(2, String.valueOf(TercetoManager.getLastTerceto()+2));
                    terAux = (Terceto) auxCondStack.pop();
                    terAux.updateTerceto(2, String.valueOf(TercetoManager.getLastTerceto()+2));
                }
                else {
                    terAux = (Terceto) auxCondStack.pop();
                    terAux.updateTerceto(2, String.valueOf(TercetoManager.getLastTerceto()+2));
                }

                Terceto tercetoBi = new Terceto("BI");
                auxCondStack.push(tercetoBi);

                currLogOp = -1;
                complexCond = -1;
            :}
             falseBody
             {:
                // Fin bloque F
                System.out.println("If else statement");

                Terceto terAux;

                terAux = (Terceto) auxCondStack.pop();
                terAux.updateTerceto(2, String.valueOf(TercetoManager.getLastTerceto()+1));
             :};

decitionAux ::= IF OPEN_BRACKET condition CLOSE_BRACKET
            {:
                if(complexCond == 1 && currLogOp == 0) {
                Terceto terAux = (Terceto) auxCondStack.pop();
                Terceto terOr = (Terceto) auxCondStack.pop();
                terOr.updateTerceto(2, String.valueOf(condIdx+1));
                auxCondStack.push(terOr);
                auxCondStack.push(terAux);
                }
             :};
trueBody ::= OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET;
falseBody ::= ELSE OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET;
condition ::= comparison {:System.out.println("Comparison");:} AND_COND {: currLogOp=1; complexCond=1; :} comparison {: System.out.println("And (&&) condition"); condIdx = TercetoManager.comparatorIdx.getTercetoNumber(); :};
condition ::= comparison {:System.out.println("Comparison");:} OR_COND {: currLogOp=0; complexCond=1; :} comparison {: System.out.println("Or (||) condition"); condIdx = TercetoManager.comparatorIdx.getTercetoNumber(); :};
condition ::= comparison {: System.out.println("Condition = Comparison"); condIdx = TercetoManager.comparatorIdx.getTercetoNumber(); :};
condition ::= NOT_COND comparison
            {:
                System.out.println("Not (!) condition");

                Terceto auxComparator = (Terceto) auxCondStack.pop();
                auxComparator.negateTerceto();
                auxCondStack.push(auxComparator);
            :};
comparison ::= expression {: auxCondExprStack.push(TercetoManager.expressionIdx.getTercetoNumber()); :} comparator expression
               {:
                   System.out.println("Comparison");

                    // creo comparacion (CMP, [], [])
                    condExpr = (int) auxCondExprStack.pop();
                    Terceto terceto = new Terceto("CMP", condExpr, TercetoManager.expressionIdx.getTercetoNumber());
                    TercetoManager.comparisonIdx.setTerceto(terceto);

                   // Si la condicion es un OR (estoy en la segunda comparacion, desapilo y actualizo el terceto de la primer condicion)
                   if(currLogOp == 0) {
                        Terceto auxComparator = (Terceto) auxCondStack.pop();
                        auxComparator.negateTerceto();
                        auxCondStack.push(auxComparator);
                   }

                   Terceto tercetoComparator = new Terceto(currentComparator);
                   TercetoManager.comparatorIdx.setTerceto(tercetoComparator);
                   auxCondStack.push(TercetoManager.comparatorIdx.getTerceto()); // apilo para luego actualizar
               :};
comparison ::= OPEN_BRACKET condition CLOSE_BRACKET {: System.out.println("Comparison"); :};
comparator ::= MAYOR {: currentComparator = "BLE";:}
               | LOWER {: currentComparator = "BGE";:}
               | MAYOR_I {: currentComparator = "BLT";:}
               | LOWER_I {: currentComparator = "BGT";:}
               | EQUAL {: currentComparator = "BNE";:}
               | NOT_EQUAL {: currentComparator = "BQE"; System.out.println("Comparator"); :};

iterator ::= WHILE OPEN_BRACKET {: Terceto tercetoEt = new Terceto("ET_WHILE"); TercetoManager.iteratorIdx.setTerceto(tercetoEt); :} condition {:
                if(complexCond == 1 && currLogOp == 0) {
                     Terceto terAux = (Terceto) auxCondStack.pop();
                     Terceto terOr = (Terceto) auxCondStack.pop();
                     terOr.updateTerceto(2, String.valueOf(condIdx+1));
                     auxCondStack.push(terOr);
                     auxCondStack.push(terAux);
                     } :} CLOSE_BRACKET OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET {:
                 System.out.println("While statement");

                 Terceto terAux;
                 if (currLogOp == 1)
                 {
                     terAux = (Terceto) auxCondStack.pop();
                     terAux.updateTerceto(2, String.valueOf(TercetoManager.getLastTerceto()+2));

                     terAux = (Terceto) auxCondStack.pop();
                     terAux.updateTerceto(2, String.valueOf(TercetoManager.getLastTerceto()+2));

                 } else {
                     terAux = (Terceto) auxCondStack.pop();
                     terAux.updateTerceto(2, String.valueOf(TercetoManager.getLastTerceto()+2));
                 }

                 currLogOp = -1;
                 complexCond = -1;

                 Terceto tercetoBi = new Terceto("BI", TercetoManager.iteratorIdx.getTercetoNumber());
             :};

assignment ::= IDENTIFIER:id ASSIG expression {:
            System.out.println("Assignment to integer or float constant");

            if(Utils.checkIdExpresionType(id, true)){
                Terceto terceto = new Terceto("=", id, TercetoManager.expressionIdx.getTercetoNumber());
                TercetoManager.assignmentIdx.setTerceto(terceto);
            }
        :};
assignment ::= IDENTIFIER:id ASSIG STRING_CONSTANT:str {:
            System.out.println("Assignment to string constant");

            Terceto terceto = new Terceto("=", id.toString(), str.toString());
            TercetoManager.assignmentIdx.setTerceto(terceto);
        :};
expression ::= expression {: auxExprStack.push(TercetoManager.expressionIdx.getTercetoNumber()); :} PLUS term {:
            System.out.println("+");

            exprIdx = (int) auxExprStack.pop();
            termIdx = TercetoManager.termIdx.getTercetoNumber();

            Terceto terceto = new Terceto("+", exprIdx, termIdx);
            TercetoManager.expressionIdx.setTerceto(terceto);
        :};

expression ::= expression {: auxExprStack.push(TercetoManager.expressionIdx.getTercetoNumber()); :} SUB term {:
            System.out.println("-");

            exprIdx = (int) auxExprStack.pop();
            termIdx = TercetoManager.termIdx.getTercetoNumber();

            Terceto terceto = new Terceto("-", exprIdx, termIdx);
            TercetoManager.expressionIdx.setTerceto(terceto);
        :};

expression ::= term {:
            System.out.println("Expression = Term");
            TercetoManager.expressionIdx.setTerceto(TercetoManager.termIdx.getTerceto());
        :};

term ::= term {: auxTermStack.push(TercetoManager.termIdx.getTerceto().getNumber()); :} MULT factor {:
            System.out.println("*");

            termIdx = (int) auxTermStack.pop();
            factIdx = TercetoManager.factorIdx.getTercetoNumber();

            Terceto terceto = new Terceto("*", termIdx, factIdx);
            TercetoManager.termIdx.setTerceto(terceto);
        :};

term ::= term {: auxTermStack.push(TercetoManager.termIdx.getTerceto().getNumber()); :} DIV factor {:
            System.out.println("/");

            termIdx = (int) auxTermStack.pop();
            factIdx = TercetoManager.factorIdx.getTercetoNumber();

            String factor = TercetoManager.factorIdx.getTerceto().getFirst();
            if(factor.equals(String.valueOf(0))) {
                throw new InvalidDividendException("Can't divide by 0");
            }

            Terceto terceto = new Terceto("/", termIdx, factIdx);
            TercetoManager.termIdx.setTerceto(terceto);
            :};

term ::= factor {:
            System.out.println("Term = factor");

            TercetoManager.termIdx.setTerceto(TercetoManager.factorIdx.getTerceto());
            :};

factor ::= IDENTIFIER:id {:
            System.out.println("Id: " + id);

            if(Utils.checkIdExpresionType(id, false)){
                Terceto terceto = new Terceto(id.toString());
                TercetoManager.factorIdx.setTerceto(terceto);
            }
            :};

factor ::= INTEGER_CONSTANT:constant {:
            System.out.println("Integer constant: " + constant );

            Terceto terceto = new Terceto(constant.toString());
            TercetoManager.factorIdx.setTerceto(terceto);
            :};

factor ::= FLOAT_CONSTANT:constant {:
            System.out.println("Float constant: " + constant);

            Terceto terceto = new Terceto(constant.toString());
            TercetoManager.factorIdx.setTerceto(terceto);
            :};

factor ::= OPEN_BRACKET expression CLOSE_BRACKET {:
            System.out.println("Factor = (Expression)");

            TercetoManager.factorIdx.setTerceto(TercetoManager.expressionIdx.getTerceto());
            :};

s_write ::= WRITE OPEN_BRACKET STRING_CONSTANT:string_constant CLOSE_BRACKET {:
            System.out.println("Write statement");

            Terceto terceto = new Terceto("write", string_constant.toString()); :}
            | WRITE OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET {:
            System.out.println("Write statement");

            Terceto terceto = new Terceto("write", id.toString());
            :};

s_read ::= READ OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET {:
            System.out.println("Read statement");

            Terceto terceto = new Terceto("read", id.toString());
            :};

all_equal ::= ALL_EQUAL OPEN_BRACKET comparable_list CLOSE_BRACKET {:
                System.out.println("All-equal function");
                Terceto tFalse = new Terceto("write", "Falso");
                Terceto terAux;
                while(!auxFalsyAllEqualStack.isEmpty()) {
                    terAux = (Terceto) auxFalsyAllEqualStack.pop();
                    terAux.updateTerceto(2, String.valueOf(TercetoManager.getLastTerceto()));
                }
                Terceto tTrue = new Terceto("write", "Verdadero");
                :};
comparable_list ::= comparable_list COMMA comparable;
comparable_list ::= comparable COMMA comparable;
comparable  ::= OPEN_SQUARE_BRACKET obj_list CLOSE_SQUARE_BRACKET {: listFound = 1; System.out.println("List in all-equal"); :};
obj_list ::= obj_list COMMA expression {:
            if (listFound == -1) {
                allEqualQueue.add(TercetoManager.expressionIdx.getTercetoNumber());
            } else {
                int expression = (int) allEqualQueue.removeFirst();
                Terceto tCmp = new Terceto("CMP", expression, TercetoManager.expressionIdx.getTercetoNumber());
                Terceto tJump = new Terceto("BNE", "false");
                auxFalsyAllEqualStack.push(tJump);
                allEqualQueue.addLast(TercetoManager.expressionIdx.getTercetoNumber());
            }
            :};
obj_list ::= expression {:
            System.out.println("Expression in All-equal");
            if (listFound == -1) {
                allEqualQueue.add(TercetoManager.expressionIdx.getTercetoNumber());
            } else {
                int expression = (int) allEqualQueue.removeFirst();
                Terceto tCmp = new Terceto("CMP", expression, TercetoManager.expressionIdx.getTercetoNumber());
                Terceto tJump = new Terceto("BNE");
                auxFalsyAllEqualStack.push(tJump);
                allEqualQueue.addLast(TercetoManager.expressionIdx.getTercetoNumber());
            }
            :};

repeat_inline ::= REPEAT_INLINE INTEGER_CONSTANT:integer_const {:
            SymbolEntry entry = new SymbolEntry("@auxRepInl", DataType.INTEGER_TYPE, "0");
            SymbolTableManager.insertInTable(entry);
            Terceto terceto = new Terceto("=", "@auxRepInl", String.valueOf(integer_const));
            TercetoManager.repeat_inlineIdx.setTerceto(terceto);
            :}
            OPEN_SQUARE_BRACKET block CLOSE_SQUARE_BRACKET {:
            System.out.println("Repeat-inline function");
            Terceto tMinus = new Terceto ("-", "@auxRepInl", "1");
            Terceto tCmp = new Terceto("CMP", "@auxRepInl", "0");
            Terceto tBgt = new Terceto("BGT", TercetoManager.repeat_inlineIdx.getTercetoNumber()+1);
            :};
